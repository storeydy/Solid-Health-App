{"id":"authService.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\package.json","includedInParent":true,"mtime":1641315870248}],"generated":{"js":"// import { Session, getDefaultSession, fetch } from \"@inrupt/solid-client-authn-browser\";\n// export class AuthService {\n// session = new Session();\n// async function login() {\n//     if (!session.info.isLoggedIn) {\n//         await session.login({\n//             oidcIssuer: SOLID_IDENTITY_PROVIDER,\n//             clientName: \"Inrupt tutorial client app\",\n//             redirectUrl: window.location.href\n//         });\n//     }\n// }\n// // 1b. Login Redirect. Call session.handleIncomingRedirect() function.\n// // When redirected after login, finish the process by retrieving session information.\n// async function handleRedirectAfterLogin() {\n//     await session.handleIncomingRedirect(window.location.href);\n//     if (session.info.isLoggedIn) {\n//         // Update the page with the status.\n//         document.getElementById(\n//             \"labelStatus\"\n//         ).innerHTML = `Your session is logged in with the WebID [<a target=\"_blank\" href=\"${session.info.webId}\">${session.info.webId}</a>].`;\n//         document.getElementById(\"labelStatus\").setAttribute(\"role\", \"alert\");\n//         document.getElementById(\"webID\").value = session.info.webId;\n//         //deleteDataset();\n//     }\n// }\n// // The example has the login redirect back to the index.html.\n// // This calls the function to process login information.\n// // If the function is called when not part of the login redirect, the function is a no-op.\n// handleRedirectAfterLogin();\n// }"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"authService.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"authService.js","original":{"line":3,"column":0}},{"generated":{"line":3,"column":0},"source":"authService.js","original":{"line":5,"column":0}},{"generated":{"line":4,"column":0},"source":"authService.js","original":{"line":7,"column":0}},{"generated":{"line":5,"column":0},"source":"authService.js","original":{"line":8,"column":0}},{"generated":{"line":6,"column":0},"source":"authService.js","original":{"line":9,"column":0}},{"generated":{"line":7,"column":0},"source":"authService.js","original":{"line":10,"column":0}},{"generated":{"line":8,"column":0},"source":"authService.js","original":{"line":11,"column":0}},{"generated":{"line":9,"column":0},"source":"authService.js","original":{"line":12,"column":0}},{"generated":{"line":10,"column":0},"source":"authService.js","original":{"line":13,"column":0}},{"generated":{"line":11,"column":0},"source":"authService.js","original":{"line":14,"column":0}},{"generated":{"line":12,"column":0},"source":"authService.js","original":{"line":15,"column":0}},{"generated":{"line":13,"column":0},"source":"authService.js","original":{"line":17,"column":0}},{"generated":{"line":14,"column":0},"source":"authService.js","original":{"line":18,"column":0}},{"generated":{"line":15,"column":0},"source":"authService.js","original":{"line":19,"column":0}},{"generated":{"line":16,"column":0},"source":"authService.js","original":{"line":20,"column":0}},{"generated":{"line":17,"column":0},"source":"authService.js","original":{"line":21,"column":0}},{"generated":{"line":18,"column":0},"source":"authService.js","original":{"line":22,"column":0}},{"generated":{"line":19,"column":0},"source":"authService.js","original":{"line":23,"column":0}},{"generated":{"line":20,"column":0},"source":"authService.js","original":{"line":24,"column":0}},{"generated":{"line":21,"column":0},"source":"authService.js","original":{"line":25,"column":0}},{"generated":{"line":22,"column":0},"source":"authService.js","original":{"line":26,"column":0}},{"generated":{"line":23,"column":0},"source":"authService.js","original":{"line":27,"column":0}},{"generated":{"line":24,"column":0},"source":"authService.js","original":{"line":28,"column":0}},{"generated":{"line":25,"column":0},"source":"authService.js","original":{"line":29,"column":0}},{"generated":{"line":26,"column":0},"source":"authService.js","original":{"line":30,"column":0}},{"generated":{"line":27,"column":0},"source":"authService.js","original":{"line":32,"column":0}},{"generated":{"line":28,"column":0},"source":"authService.js","original":{"line":33,"column":0}},{"generated":{"line":29,"column":0},"source":"authService.js","original":{"line":34,"column":0}},{"generated":{"line":30,"column":0},"source":"authService.js","original":{"line":35,"column":0}},{"generated":{"line":31,"column":0},"source":"authService.js","original":{"line":36,"column":0}}],"sources":{"authService.js":"// import { Session, getDefaultSession, fetch } from \"@inrupt/solid-client-authn-browser\";\r\n\r\n// export class AuthService {\r\n\r\n// session = new Session();\r\n\r\n// async function login() {\r\n//     if (!session.info.isLoggedIn) {\r\n//         await session.login({\r\n//             oidcIssuer: SOLID_IDENTITY_PROVIDER,\r\n//             clientName: \"Inrupt tutorial client app\",\r\n//             redirectUrl: window.location.href\r\n//         });\r\n//     }\r\n// }\r\n\r\n// // 1b. Login Redirect. Call session.handleIncomingRedirect() function.\r\n// // When redirected after login, finish the process by retrieving session information.\r\n// async function handleRedirectAfterLogin() {\r\n//     await session.handleIncomingRedirect(window.location.href);\r\n//     if (session.info.isLoggedIn) {\r\n//         // Update the page with the status.\r\n//         document.getElementById(\r\n//             \"labelStatus\"\r\n//         ).innerHTML = `Your session is logged in with the WebID [<a target=\"_blank\" href=\"${session.info.webId}\">${session.info.webId}</a>].`;\r\n//         document.getElementById(\"labelStatus\").setAttribute(\"role\", \"alert\");\r\n//         document.getElementById(\"webID\").value = session.info.webId;\r\n//         //deleteDataset();\r\n//     }\r\n// }\r\n\r\n// // The example has the login redirect back to the index.html.\r\n// // This calls the function to process login information.\r\n// // If the function is called when not part of the login redirect, the function is a no-op.\r\n// handleRedirectAfterLogin();\r\n// }"},"lineCount":null}},"error":null,"hash":"090ab97289c138738a4e12ca3551e89e","cacheData":{"env":{}}}