{"id":"../node_modules/@inrupt/solid-client-authn-core/dist/util/handlerPattern/AggregateHandler.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\util\\handlerPattern\\AggregateHandler.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\src\\util\\handlerPattern\\AggregateHandler.ts","includedInParent":true,"mtime":1646658834387},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\package.json","includedInParent":true,"mtime":1646658842548},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1646658834363},{"name":"../../errors/InruptError","loc":{"line":6,"column":46},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\util\\handlerPattern\\AggregateHandler.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\errors\\InruptError.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst InruptError_1 = __importDefault(require(\"../../errors/InruptError\"));\nclass AggregateHandler {\n    constructor(handleables) {\n        this.handleables = handleables;\n    }\n    async getProperHandler(params) {\n        const canHandleList = await Promise.all(this.handleables.map((handleable) => handleable.canHandle(...params)));\n        for (let i = 0; i < canHandleList.length; i += 1) {\n            if (canHandleList[i]) {\n                return this.handleables[i];\n            }\n        }\n        return null;\n    }\n    async canHandle(...params) {\n        return (await this.getProperHandler(params)) !== null;\n    }\n    async handle(...params) {\n        const handler = await this.getProperHandler(params);\n        if (handler) {\n            return handler.handle(...params);\n        }\n        throw new InruptError_1.default(`[${this.constructor.name}] cannot find a suitable handler for: ${params\n            .map((param) => {\n            try {\n                return JSON.stringify(param);\n            }\n            catch (err) {\n                return param.toString();\n            }\n        })\n            .join(\", \")}`);\n    }\n}\nexports.default = AggregateHandler;\n"},"sourceMaps":{"js":{"version":3,"file":"AggregateHandler.js","sourceRoot":"","sources":["../../../src/util/handlerPattern/AggregateHandler.ts"],"names":[],"mappings":";;;;;AA8BA,2EAAmD;AAKnD,MAAqB,gBAAgB;IAGnC,YAAoB,WAAgC;QAAhC,gBAAW,GAAX,WAAW,CAAqB;IAAG,CAAC;IAOhD,KAAK,CAAC,gBAAgB,CAAC,MAAS;QAsBtC,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CACrC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,CAAC,CACtE,CAAC;QAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAChD,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;aAC5B;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,GAAG,MAAS;QAC1B,OAAO,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,GAAG,MAAS;QACvB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,OAAO,EAAE;YACX,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;SAClC;QAED,MAAM,IAAI,qBAAW,CACnB,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,yCAAyC,MAAM;aACrE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,IAAI;gBACF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aAC9B;YAAC,OAAO,GAAG,EAAE;gBAEZ,OAAQ,KAAa,CAAC,QAAQ,EAAE,CAAC;aAClC;QACH,CAAC,CAAC;aACD,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,CAAC;IACJ,CAAC;CACF;AAnED,mCAmEC","sourcesContent":["/*\r\n * Copyright 2022 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\n/**\r\n * An abstract class that will select the first handler that can handle certain parameters\r\n */\r\nimport IHandleable from \"./IHandleable\";\r\nimport InruptError from \"../../errors/InruptError\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport default class AggregateHandler<P extends Array<unknown>, R>\r\n  implements IHandleable<P, R>\r\n{\r\n  constructor(private handleables: IHandleable<P, R>[]) {}\r\n\r\n  /**\r\n   * Helper function that will asynchronously determine the proper handler to use. If multiple\r\n   * handlers can handle, it will choose the first one in the list\r\n   * @param params Paramerters to feed to the handler\r\n   */\r\n  private async getProperHandler(params: P): Promise<IHandleable<P, R> | null> {\r\n    // TODO : This function doesn't currently operate as described. Tests need to be written\r\n\r\n    // return new Promise<IHandleable<P, R> | null>((resolve, reject) => {\r\n    //  const resolvedValues: Array<boolean | null> = Array(this.handleables.length).map(() => null)\r\n    //   let numberResolved = 0\r\n    //   this.handleables.forEach(async (handleable: IHandleable<P, R>, index: number) => {\r\n    //     resolvedValues[index] = await handleable.canHandle(...params)\r\n    //     numberResolved++\r\n    //     let curResolvedValueIndex = 0\r\n    //     while (\r\n    //       resolvedValues[curResolvedValueIndex] !== null ||\r\n    //       resolvedValues[curResolvedValueIndex] !== undefined\r\n    //     ) {\r\n    //       if (resolvedValues[curResolvedValueIndex]) {\r\n    //         resolve(this.handleables[curResolvedValueIndex])\r\n    //       }\r\n    //       curResolvedValueIndex++\r\n    //     }\r\n    //   })\r\n    // })\r\n\r\n    const canHandleList = await Promise.all(\r\n      this.handleables.map((handleable) => handleable.canHandle(...params))\r\n    );\r\n\r\n    for (let i = 0; i < canHandleList.length; i += 1) {\r\n      if (canHandleList[i]) {\r\n        return this.handleables[i];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async canHandle(...params: P): Promise<boolean> {\r\n    return (await this.getProperHandler(params)) !== null;\r\n  }\r\n\r\n  async handle(...params: P): Promise<R> {\r\n    const handler = await this.getProperHandler(params);\r\n    if (handler) {\r\n      return handler.handle(...params);\r\n    }\r\n\r\n    throw new InruptError(\r\n      `[${this.constructor.name}] cannot find a suitable handler for: ${params\r\n        .map((param) => {\r\n          try {\r\n            return JSON.stringify(param);\r\n          } catch (err) {\r\n            /* eslint-disable  @typescript-eslint/no-explicit-any */\r\n            return (param as any).toString();\r\n          }\r\n        })\r\n        .join(\", \")}`\r\n    );\r\n  }\r\n}\r\n"]}},"error":null,"hash":"70679551eb8238818be16d76bd4ef53d","cacheData":{"env":{}}}