{"id":"../node_modules/@inrupt/solid-client-authn-core/dist/storage/InMemoryStorage.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\storage\\InMemoryStorage.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\src\\storage\\InMemoryStorage.ts","includedInParent":true,"mtime":1646658834384},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\package.json","includedInParent":true,"mtime":1646658842548},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\GitlabRepo\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1646658834363}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass InMemoryStorage {\n    constructor() {\n        this.map = {};\n    }\n    async get(key) {\n        return this.map[key] || undefined;\n    }\n    async set(key, value) {\n        this.map[key] = value;\n    }\n    async delete(key) {\n        delete this.map[key];\n    }\n}\nexports.default = InMemoryStorage;\n"},"sourceMaps":{"js":{"version":3,"file":"InMemoryStorage.js","sourceRoot":"","sources":["../../src/storage/InMemoryStorage.ts"],"names":[],"mappings":";;AA+BA,MAAqB,eAAe;IAApC;QACU,QAAG,GAA2B,EAAE,CAAC;IAa3C,CAAC;IAXC,KAAK,CAAC,GAAG,CAAC,GAAW;QACnB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAa;QAClC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,GAAW;QACtB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;CACF;AAdD,kCAcC","sourcesContent":["/*\r\n * Copyright 2022 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\nimport IStorage from \"./IStorage\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport default class InMemoryStorage implements IStorage {\r\n  private map: Record<string, string> = {};\r\n\r\n  async get(key: string): Promise<string | undefined> {\r\n    return this.map[key] || undefined;\r\n  }\r\n\r\n  async set(key: string, value: string): Promise<void> {\r\n    this.map[key] = value;\r\n  }\r\n\r\n  async delete(key: string): Promise<void> {\r\n    delete this.map[key];\r\n  }\r\n}\r\n"]}},"error":null,"hash":"87201adf752e81ca511bc1053f721e21","cacheData":{"env":{}}}